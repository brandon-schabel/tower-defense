---
description: Global TypeScript coding standards and best practices for all .ts / .tsx files.Ï
globs: **/*.ts, **/*.tsx
alwaysApply: false
---
# Global TypeScript Rules

These rules apply to **all TypeScript** files in this project, both client and server. The goal is to maintain a consistent, high-quality codebase.

## 1. Strong Typing & Advanced TS Features

- **No `any` Unless Absolutely Necessary**  
  Use strong typing. When dealing with potentially unknown shapes, create or reuse a Zod schema (and derive the TS type from it).  
- **Generics & Inference**  
  Where possible, leverage TypeScript’s generics and advanced inference. If a function can have a parameter typed by a generic, do so to avoid wide or unknown types.  
- **Modern TS Constructs**  
  Make use of mapped types, intersection types, `satisfies` expressions, etc., if they help clarity or correctness.

## 2. Functional & Readable Code

- **Functional Programming Style**  
  Keep your functions pure whenever possible. Avoid side effects unless they’re truly needed.  
- **No Bloated Functions**  
  Each function should do one small job. If it’s getting too large, refactor into smaller functions.  
- **Descriptive Naming**  
  Use clear, descriptive names. Avoid abbreviations or single-letter variable names (except in trivial loops).

## 3. Error Handling & Logging

- **Throw or Return**  
  When an error condition occurs, either throw a typed error (`Error` subclass) or return a descriptive error object. Do not silently swallow.  
- **Logging**  
  Use a consistent logging approach (e.g., a custom `logger` module). Prefer structured logs over `console.log` for production-grade code.

## 4. Minimal External Dependencies

- **Prefer Bun & Standard Lib**  
  Where possible, rely on Bun’s built-in features or TS/Node standard libraries. If an external library is truly necessary, verify it carefully.  
- **Tree Shaking & Dead Code**  
  Keep imports minimal and ensure unused code is removed. Don’t import entire libraries if you only need a small part.

## 5. File & Module Organization

- **Single-Responsibility Files**  
  Each file should generally contain only one main concept (one class, one service, or a small group of closely related functions).  
- **Clear Imports & Exports**  
  Use named exports unless a file’s entire purpose is one main export. Keep your import lines sorted and grouped logically.

## 6. Testing & Documentation

- **Test-Driven Mindset**  
  When introducing new logic, consider adding or updating tests in parallel. Ensure functions remain small in a unit way that way they can be unit tested. 
- **Inline Documentation**  
  Provide docstrings or inline comments for complex sections or domain logic. Keep them accurate and concise.  

These guidelines ensure high-quality, maintainable TypeScript across the entire project.